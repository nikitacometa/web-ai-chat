import os
import uuid
import aiofiles
from typing import Optional
from app.core.config import settings
import logging

logger = logging.getLogger(__name__)


class FileManager:
    def __init__(self):
        # Create directories if they don't exist
        os.makedirs(settings.research_dir, exist_ok=True)
        os.makedirs(settings.apps_dir, exist_ok=True)
    
    async def save_html_file(self, content: str, file_type: str = "app") -> tuple[str, str]:
        """Save HTML content to file and return file_id and full path"""
        file_id = self._generate_file_id()
        
        if file_type == "app":
            directory = settings.apps_dir
            filename = f"{file_id}.html"
        elif file_type == "research":
            directory = settings.research_dir
            filename = f"{file_id}.html"
        else:
            raise ValueError(f"Invalid file type: {file_type}")
        
        file_path = os.path.join(directory, filename)
        
        try:
            async with aiofiles.open(file_path, 'w', encoding='utf-8') as f:
                await f.write(content)
            
            logger.info(f"Saved {file_type} file: {file_path}")
            return file_id, file_path
        except Exception as e:
            logger.error(f"Error saving file: {str(e)}")
            raise
    
    async def save_research_html(self, research_data: dict, title: str) -> tuple[str, str]:
        """Convert research data to HTML and save"""
        html_content = self._generate_research_html(research_data, title)
        return await self.save_html_file(html_content, "research")
    
    def _generate_file_id(self) -> str:
        """Generate unique file ID"""
        return str(uuid.uuid4())[:8]
    
    def _generate_research_html(self, data: dict, title: str) -> str:
        """Generate HTML for research results"""
        return f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title} - CogniCraft Research</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 min-h-screen">
    <div class="container mx-auto px-4 py-8 max-w-4xl">
        <header class="mb-8">
            <h1 class="text-4xl font-bold text-gray-800 mb-2">{data.get('title', title)}</h1>
            <p class="text-gray-600">Generated by CogniCraft AI ðŸ§ âœ¨</p>
        </header>
        
        <section class="bg-white rounded-lg shadow-md p-6 mb-6">
            <h2 class="text-2xl font-semibold mb-4 text-gray-700">Executive Summary</h2>
            <p class="text-gray-600 leading-relaxed">{data.get('executive_summary', '')}</p>
        </section>
        
        <section class="bg-white rounded-lg shadow-md p-6 mb-6">
            <h2 class="text-2xl font-semibold mb-4 text-gray-700">Key Concepts</h2>
            <div class="space-y-4">
                {"".join(f'''
                <div class="border-l-4 border-blue-500 pl-4">
                    <h3 class="font-semibold text-lg">{concept.get('concept', '')}</h3>
                    <p class="text-gray-600 mt-1">{concept.get('explanation', '')}</p>
                </div>
                ''' for concept in data.get('key_concepts', []))}
            </div>
        </section>
        
        <section class="bg-white rounded-lg shadow-md p-6 mb-6">
            <h2 class="text-2xl font-semibold mb-4 text-gray-700">Current Developments</h2>
            <div class="space-y-4">
                {"".join(f'''
                <div class="bg-gray-50 p-4 rounded">
                    <h3 class="font-semibold">{dev.get('development', '')}</h3>
                    <p class="text-gray-600 mt-1">{dev.get('description', '')}</p>
                    <p class="text-sm text-blue-600 mt-2">Significance: {dev.get('significance', '')}</p>
                </div>
                ''' for dev in data.get('current_developments', []))}
            </div>
        </section>
        
        <section class="bg-white rounded-lg shadow-md p-6 mb-6">
            <h2 class="text-2xl font-semibold mb-4 text-gray-700">Practical Applications</h2>
            <div class="grid md:grid-cols-2 gap-4">
                {"".join(f'''
                <div class="border rounded-lg p-4">
                    <h3 class="font-semibold text-blue-600">{app.get('application', '')}</h3>
                    <p class="text-sm text-gray-600 mt-1">{app.get('description', '')}</p>
                    <p class="text-xs text-green-600 mt-2">Benefits: {app.get('benefits', '')}</p>
                </div>
                ''' for app in data.get('practical_applications', []))}
            </div>
        </section>
        
        <section class="bg-white rounded-lg shadow-md p-6">
            <h2 class="text-2xl font-semibold mb-4 text-gray-700">Future Trends</h2>
            <div class="space-y-3">
                {"".join(f'''
                <div class="flex items-start space-x-3">
                    <div class="flex-shrink-0 w-2 h-2 bg-purple-500 rounded-full mt-2"></div>
                    <div>
                        <h3 class="font-medium">{trend.get('trend', '')}</h3>
                        <p class="text-sm text-gray-600">Timeline: {trend.get('timeline', '')}</p>
                        <p class="text-sm text-gray-500">Impact: {trend.get('impact', '')}</p>
                    </div>
                </div>
                ''' for trend in data.get('future_trends', []))}
            </div>
        </section>
        
        <footer class="mt-8 text-center text-gray-500 text-sm">
            <p>Research conducted on {data.get('metadata', {}).get('research_date', 'today')}</p>
            <p>Complexity: {data.get('metadata', {}).get('complexity_level', 'intermediate')}</p>
        </footer>
    </div>
</body>
</html>"""


file_manager = FileManager()